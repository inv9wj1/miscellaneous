router.post("/createSingleFileUsingApi", async (req, res) => {
  const authHeader = req.headers["authorization"];
  console.log("auth header is ", authHeader);
  const token = authHeader && authHeader.split(" ")[1];
  console.log("token value is ", token);

  if (!token) {
    return res.status(401).json({ message: "No token provided" });
  }

  try {
    const session = await createSession(token);
    console.log(session);

    console.log("filename is ", req.body.createFileName);
    console.log("model name is ", req.body.modelFileName);
    console.log(req.body.inputValues);
    console.log("tab name is ", req.body.tabName);

    var obj = req.body.inputValues;
    var newObj = {};
    for (var key in obj) {
      if (/^\d+$/.test(obj[key])) {
        newObj[key] = +obj[key];
      } else {
        newObj[key] = obj[key];
      }
    }
    console.log(JSON.stringify(newObj));

    const createType = req.body.tabName;

    if (createType === "sequential") {
      const dataset = req.body.createFileName;
      const dataSetType = CreateDataSetTypeEnum.DATA_SET_SEQUENTIAL;
      var options = newObj;
      const response = await Create.dataSet(session, dataSetType, dataset, options);
      console.log(response);
      res.status(200).json(response);
    } else if (createType === "partitioned") {
      const dataset = req.body.createFileName;
      const dataSetType = CreateDataSetTypeEnum.DATA_SET_PARTITIONED;
      var options = newObj;
      const response = await Create.dataSet(session, dataSetType, dataset, options);
      console.log(response);
      res.status(200).json(response);
    } else if (createType === "model") {
      const dataset = req.body.createFileName;
      const likeDataSetName = req.body.modelFileName;
      var options = {}; // Add any required options here
      const response = await Create.dataSetLike(session, dataset, likeDataSetName);
      console.log(response);
      res.status(200).json(response);
    } else {
      res.status(400).json({ message: "Invalid createType" });
    }
  } catch (err) {
    console.log(err);
    res.status(500).json(err);
  }
});
