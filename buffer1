const express = require('express');
const axios = require('axios');
const https = require('https');
const fs = require('fs');
const path = require('path');
const { Download } = require('@zowe/zos-files-for-zowe-sdk');

const router = express.Router();
const port = 3000;

// Zowe session configuration request using JWT
const zosmfHost = "aaaaaaa.1dc.com"; // replace with your z/OSMF host
const zosmfPort = 443; // replace with your z/OSMF port
const userr = "aaaaaa"; // replace with your z/OSMF username
const passwordd = "bbbbbb@12"; // replace with your z/OSMF password

const filePath = path.resolve(`routes/ZOSMF.crt`);
const cert = fs.readFileSync(filePath);

const httpsAgent = new https.Agent({
  rejectUnauthorized: false,
});

let ltpaToken = null;
let tokenExpirationTime = null;

async function getLtpaToken() {
  const auth = Buffer.from(`${userr}:${passwordd}`).toString("base64");

  try {
    const response = await axios.post(
      `https://${zosmfHost}:${zosmfPort}/zosmf/services/authenticate`,
      null,
      {
        headers: {
          Authorization: `Basic ${auth}`,
          "X-CSRF-ZOSMF-HEADER": "dummy", // Add your actual header value here
        },
        httpsAgent,
        withCredentials: true, // Ensure that axios includes cookies in the request
      }
    );

    const setCookieHeader = response.headers["set-cookie"];

    if (!setCookieHeader) {
      throw new Error("Set-Cookie header not found in response");
    }

    const ltpaCookie = setCookieHeader.find((cookie) =>
      cookie.startsWith("LtpaToken2=")
    );

    if (!ltpaCookie) {
      throw new Error("LTPA token not found in cookies");
    }

    ltpaToken = ltpaCookie.split(";")[0].split("=")[1];

    return ltpaToken;
  } catch (error) {
    console.error("Error obtaining LTPA token:", error);
    throw error;
  }
}

async function createSession() {
  const currentTime = Date.now();

  if (
    !ltpaToken ||
    (tokenExpirationTime && currentTime >= tokenExpirationTime)
  ) {
    console.log("LTPA token expired or not found, obtaining a new token.");
    await getLtpaToken();
  }

  const session = {
    ISession: {
      type: 'z/OSMF',
      host: zosmfHost,
      port: zosmfPort,
      protocol: 'https',
      rejectUnauthorized: false,
      tokenType: "ltpaToken",
      tokenValue: ltpaToken
    }
  };

  return session;
}

router.get("/download-dataset", async (req, res) => {
  const datasetName = req.query.dataset; // get dataset name from query parameters

  if (!datasetName) {
    return res.status(400).send("Dataset name is required");
  }

  try {
    const session = await createSession();
    const options = { failFast: false };
    const response = await Download.allMembers(session, datasetName, options);
    res.setHeader(
      "Content-Disposition",
      `attachment; filename="${datasetName}.txt"`
    );
    res.setHeader("Content-Type", "text/plain");
    res.send(response.toString());
  } catch (error) {
    console.error(error);
    res.status(500).send("Error downloading dataset");
  }
});

const app = express();
app.use('/', router);

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
