import { setChonkyDefaults } from "chonky";
import { ChonkyIconFA } from "chonky-icon-fontawesome";
import { FullFileBrowser, ChonkyActions } from "chonky";
import { useEffect, useState } from "react";
import folderSearch from "./folderSearch";
import handleAction from "./chonkyActionHandler";
import { customActions } from "./chonkyCustomActions";
import axiosConnect from "../api/axiosConnect";
import DemoReSizableModal from "./DemoReSizableModal";
import "./ResizableModal.css";
import Cookies from "js-cookie";
import {
  CInputGroup,
  CButton,
  CFormInput,
  CFormTextarea,
  CForm,
  CRow,
  CFormLabel,
  CCol,
  CModal,
  CModalHeader,
  CModalBody,
  CModalTitle,
  CModalFooter,
  CAccordionBody,
  CAccordion,
  CAccordionHeader,
  CAccordionItem,
} from "@coreui/react";
import { Tabs } from "antd";
import data from "./data";

function FileSpace() {
  const [allCardData, setAllCardData] = useState([]);
  const [currentFolder, setCurrentFolder] = useState("0");
  const [files, setFiles] = useState(null);
  const [folderChain, setFolderChain] = useState(null);
  const fileActions = [...customActions, ChonkyActions.DownloadFiles];
  const [searchInput, setSearchInput] = useState("");
  const [fileName, setFileName] = useState("");
  const [createFileName, setCreateFileName] = useState("");
  const [modelFileName, setModelFileName] = useState("");
  const [fileNameOld, setFileNameOld] = useState("");
  const [tabName, setTabName] = useState("model");
  const [folderName, setFolderName] = useState("");
  const [successMsg, setSuccessMsg] = useState({});
  const [isMember, setIsMember] = useState(false);
  const [modalCount, setModalCount] = useState(0);

  const [response, setResponse] = useState("");
  const [visible, setVisible] = useState(false);
  const [visibleRename, setVisibleRename] = useState(false);
  const [visibleCreate, setVisibleCreate] = useState(false);
  const [visibleDelete, setVisibleDelete] = useState(false);
  const [visibleSubmit, setVisibleSubmit] = useState(false);
  const [visibleHmigrate, setVisibleHmigrate] = useState(false);
  const [visibleHrecall, setVisibleHrecall] = useState(false);
  const [visibleInfo, setVisibleInfo] = useState(false);
  const [visibleTest, setVisibleTest] = useState(false);
  const [visibleHdelete, setVisibleHdelete] = useState(false);
  const [modalVisibleResponse, setModalVisibleResponse] = useState(false);
  const [modalVisibleLoading, setModalVisibleLoading] = useState(false);
  const [fileContent, setFileContent] = useState("");
  const [fileContent1, setFileContent1] = useState("");
  const [fileContent2, setFileContent2] = useState("");
  const [fileContent3, setFileContent3] = useState("");
  const [fileContent4, setFileContent4] = useState("");
  const [fileContent5, setFileContent5] = useState("");
  const [visible1, setVisible1] = useState(false);
  const [visible2, setVisible2] = useState(false);
  const [visible3, setVisible3] = useState(false);
  const [visible4, setVisible4] = useState(false);
  const [visible5, setVisible5] = useState(false);
  const [fileName1, setFileName1] = useState("");
  const [fileName2, setFileName2] = useState("");
  const [fileName3, setFileName3] = useState("");
  const [fileName4, setFileName4] = useState("");
  const [fileName5, setFileName5] = useState("");
  const [inputValues, setInputValues] = useState({});
  const [inputFieldCount, setInputFieldCount] = useState(0);

  setChonkyDefaults({ iconComponent: ChonkyIconFA });

  //setting default values:
  // setInputValues({...inputValues,["alcunit"]: "CYL"});
  // setInputValues({...inputValues,["blksize"]: "6160"});
  // setInputValues({...inputValues,["dsorg"]: "PS"});
  // setInputValues({...inputValues,["lrecl"]: "80"});
  // setInputValues({...inputValues,["primary"]: "1"});
  // setInputValues({...inputValues,["recfm"]: "FB"});

  // setInputValues({"alcunit":"CYL","blksize":"6160"})
  //   let getInputValueCount = () => {
  //     let count = 0;
  //     if (Array.isArray(inputData) && inputData.length > 0) {
  //         count = inputData.length;
  //     }
  //     setInputFieldCount(count);
  // }
  // useEffect(() => {
  //   getInputValueCount();
  // },[]);

  let handleOnCreateButtonClick2 = (e) => {
    // e.preventDefault();
    console.log("filename is ", createFileName);
    console.log("model name is ", modelFileName);

    console.log(JSON.stringify(inputValues));
  };

  // const loadFileSpaceData = async () => {
  const loadFileSpaceData = () => {
    //const res = await axiosConnect.post("/getFileSpaceData",{"fileDir": searchInput});
    handleOnLoading(true);
    const token = Cookies.get("token"); // Get the token from the cookie
    axiosConnect
      .post(
        "/getFileSpaceData",
        { fileDir: searchInput },
        {
          headers: {
            "Access-Control-Allow-Origin": "*", // Replace * with your allowed origins
            "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
            "Access-Control-Allow-Headers":
              "Origin, X-Requested-With, Content-Type, Accept, Authorization", // Add more headers if needed
            Authorization: `Bearer ${token}`, // Add the token here
          },
        }
      )
      .then((response) => {
        //handle success
        console.log(response);
        console.log("Data received from getFileSpaceData" + response.data);
        setResponse(response);
        setAllCardData(response.data);
        let folderChainTemp = [];
        let filesTemp = [];
        const [found, filesTemp1, folderChainTemp1] = folderSearch(
          response.data,
          folderChainTemp,
          currentFolder
        );

        console.log("found is " + found);
        if (found) {
          console.log("found", filesTemp1, folderChainTemp1);
          filesTemp = filesTemp1;
          folderChainTemp = folderChainTemp1;
        }

        console.log("files", filesTemp);
        console.log("folders", folderChainTemp);
        setFolderChain(folderChainTemp);
        setFiles(filesTemp);
        handleOnLoading(false);
      })
      .catch((err) => {
        //handle error
        console.log(err);
        // setCommandOutput("Error while getting the Files Directory: " + fullCommand);
        handleOnLoading(false);
      });
  };

  const openModal = () => {
    if (modalCount < 4) {
      setModalCount(modalCount + 1);
    } else {
      // If modal count exceeds 4, show an error or the fifth modal
      alert("You can't open more than 4 modals!");
    }
  };

  const handleActionWrapper = (data) => {
    console.log("clickedItem is " + data);
    handleAction(
      allCardData,
      data,
      modalCount,
      setCurrentFolder,
      setVisible,
      setModalCount,
      setFileContent,
      setFileName,
      setFileNameOld,
      setVisibleRename,
      setVisibleCreate,
      setFolderName,
      setIsMember,
      setVisibleDelete,
      setVisibleSubmit,
      setVisibleInfo,
      setVisibleHmigrate,
      setVisibleHrecall,
      setVisibleHdelete,
      setFileContent1,
      setFileContent2,
      setFileContent3,
      setFileContent4,
      setFileContent5,
      setVisible1,
      setVisible2,
      setVisible3,
      setVisible4,
      setVisible5,
      setFileName1,
      setFileName2,
      setFileName3,
      setFileName4,
      setFileName5,
      visible1,
      visible2,
      visible3,
      visible4,
      visible5
    );
  };

  const handleOnLoadButtonClick = () => {
    console.log("Clicked handleOnLoadButtonClick" + searchInput);
    loadFileSpaceData();
  };

  const handleOnLoading = (decision) => {
    setModalVisibleLoading(decision);
  };

  const handleOnResponse = (decision) => {
    setModalVisibleResponse(decision);
  };

  const handleOnCreateButtonClick = () => {
    // e.preventDefault();
    console.log("filename is ", createFileName);
    console.log("model name is ", modelFileName);

    console.log(JSON.stringify(inputValues));

    console.log("tab name is ", tabName);
    handleOnLoading(true);
    if (tabName === "model") {
      axiosConnect
        .post("/createSingleFileUsingApi", {
          createFileName: createFileName,
          modelFileName: modelFileName,
          inputValues: inputValues,
          tabName: tabName,
        })

        .then((response) => {
          //handle success
          console.log(response);
          console.log("ganesh is here");
          handleOnLoading(false);
          setVisibleCreate(false);
          // loadFileSpaceData();
          // setResponse(response);
        })
        .catch((err) => {
          //handle error
          console.log(err);
          handleOnLoading(false);
        });
    }

    if (tabName === "sequential") {
      axiosConnect
        .post("/createSingleFileUsingApi", {
          createFileName: createFileName,
          inputValues: inputValues,
          tabName: tabName,
        })

        .then((response) => {
          //handle success
          console.log(response);
          console.log("ganesh is here");
          handleOnLoading(false);
          setVisibleCreate(false);
          // loadFileSpaceData();
          // setResponse(response);
        })
        .catch((err) => {
          //handle error
          console.log(err);
          handleOnLoading(false);
        });
    }

    if (tabName === "partitioned") {
      axiosConnect
        .post("/createSingleFileUsingApi", {
          createFileName: createFileName,
          inputValues: inputValues,
          tabName: tabName,
        })

        .then((response) => {
          //handle success
          console.log(response);
          console.log("ganesh is here");
          handleOnLoading(false);
          setVisibleCreate(false);
          // loadFileSpaceData();
          // setResponse(response);
        })
        .catch((err) => {
          //handle error
          console.log(err);
          handleOnLoading(false);
        });
    }
  };

  const handleOnRenameButtonClick = () => {
    console.log("**** Renaming FILE : ", fileName);
    console.log("oldFilename:", fileNameOld);
    console.log("folderName :", folderName);
    console.log("isMember :", isMember);
    handleOnLoading(true);
    axiosConnect
      .post("/renameSingleFile", {
        folderName: folderName,
        fileName: fileName,
        fileNameOld: fileNameOld,
        isMember: isMember,
      })

      .then((response) => {
        //handle success
        console.log(response);
        console.log("ganesh is here");
        handleOnLoading(false);
        setVisibleRename(false);
        loadFileSpaceData();
        // setResponse(response);
      })
      .catch((err) => {
        //handle error
        console.log(err);
        handleOnLoading(false);
      });
  };

  const handleOnSubmitButtonClick = () => {
    console.log("**** Submitting FILE : ", fileName);
    handleOnLoading(true);
    axiosConnect
      .post("/submitSingleFile", { fileName: fileName })
      .then((response) => {
        //handle success
        console.log(response.data);
        setSuccessMsg(response.data);
        console.log("rajesh with priya", successMsg);
        handleOnLoading(false);
        setVisibleSubmit(false);
        handleOnResponse(true);
        // setResponse(response);
      })
      .catch((err) => {
        //handle error
        console.log(err);
        handleOnLoading(false);
      });
  };

  const handleOnDeleteButtonClick = () => {
    console.log("**** Renaming FILE : ", fileName);
    console.log("oldFilename:", fileNameOld);
    console.log("folderName :", folderName);
    console.log("isMember :", isMember);
    handleOnLoading(true);
    axiosConnect
      .post("/deleteSingleFile", {
        folderName: folderName,
        fileName: fileName,
        fileNameOld: fileNameOld,
        isMember: isMember,
      })
      .then((response) => {
        //handle success
        console.log(response);
        console.log("ganesh is here");
        handleOnLoading(false);
        setVisibleDelete(false);
        loadFileSpaceData();
        // setResponse(response);
      })
      .catch((err) => {
        //handle error
        console.log(err);
        handleOnLoading(false);
      });
  };

  const handleOnSaveButtonClick = () => {
    console.log("**** SAVING FILE : ", fileName);
    console.log("**** FILE Content: ", fileContent);
    handleOnLoading();
    axiosConnect
      .post("/saveSingleFile", { fileName: fileName, fileContent: fileContent })
      .then((response) => {
        //handle success
        console.log(response);
        handleOnLoading();
        // setResponse(response);
      })
      .catch((err) => {
        //handle error
        console.log(err);
      });
  };

  const handleDataChange = (data) => {
    console.log("Typed handleDataChange" + data.target.value);
    setFileContent(data.target.value);
  };

  const handleDataChangeRename = (data) => {
    console.log("Typed handleDataChangeRename " + data.target.value);
    setFileName(data.target.value);
  };

  const handleDataChangeForModalDsn = (data) => {
    console.log("Typed handleDataChangeModalFilename " + data.target.value);
    setModelFileName(data.target.value);
  };

  const handleOnTabOptions = (key) => {
    console.log("Typed handleDataChangeModalFilename ", key);
    setTabName(key);
    if (key === "sequential") {
      setInputValues({
        alcunit: "CYL",
        blksize: "6160",
        dsorg: "PS",
        lrecl: "80",
        primary: 1,
        recfm: "FB",
      });
    }
    if (key === "Partitioned") {
      // setTabName(data.target.value); ganesh will create this
      setInputValues({
        alcunit: "CYL",
        blksize: "6160",
        dirblk: "5",
        dsorg: "PO",
        lrecl: "80",
        primary: "1",
        recfm: "FB",
      });
    }
  };

  const handleDataChangeForCreateDsn = (data) => {
    console.log("Typed handleDataChangeCreateFilename " + data.target.value);
    setCreateFileName(data.target.value);
  };

  const handleOnHmigrateButtonClick = () => {
    setVisibleHmigrate(false);

    console.log("**** Renaming FILE : ", fileName);
    console.log("oldFilename:", fileNameOld);
    console.log("folderName :", folderName);
    console.log("isMember :", isMember);
    handleOnLoading(true);
    var actionItem = "hMigrate";
    axiosConnect
      .post("/hTapeActions", {
        folderName: folderName,
        fileName: fileName,
        actionItem: actionItem,
        isMember: isMember,
      })
      .then((response) => {
        //handle success
        console.log(response);
        console.log("ganesh is here");
        handleOnLoading(false);

        //loadFileSpaceData();
        // setResponse(response);
      })
      .catch((err) => {
        //handle error
        console.log(err);
        handleOnLoading(false);
      });
  };

  const handleOnHrecallButtonClick = () => {
    setVisibleHrecall(false);

    console.log("**** Renaming FILE : ", fileName);
    console.log("oldFilename:", fileNameOld);
    console.log("folderName :", folderName);
    console.log("isMember :", isMember);
    handleOnLoading(true);
    var actionItem = "hRecall";
    axiosConnect
      .post("/hTapeActions", {
        folderName: folderName,
        fileName: fileName,
        actionItem: actionItem,
        isMember: isMember,
      })
      .then((response) => {
        //handle success
        console.log(response);
        console.log("ganesh is here");
        handleOnLoading(false);

        loadFileSpaceData();
        // setResponse(response);
      })
      .catch((err) => {
        //handle error
        console.log(err);
        handleOnLoading(false);
      });
  };

  const handleOnHdeleteButtonClick = () => {
    setVisibleHdelete(false);

    console.log("**** Renaming FILE : ", fileName);
    console.log("oldFilename:", fileNameOld);
    console.log("folderName :", folderName);
    console.log("isMember :", isMember);
    handleOnLoading(true);
    var actionItem = "hDelete";
    axiosConnect
      .post("/hTapeActions", {
        folderName: folderName,
        fileName: fileName,
        actionItem: actionItem,
        isMember: isMember,
      })
      .then((response) => {
        //handle success
        console.log(response);
        console.log("ganesh is here");
        handleOnLoading(false);

        loadFileSpaceData();
        // setResponse(response);
      })
      .catch((err) => {
        //handle error
        console.log(err);
        handleOnLoading(false);
      });
  };

  const modalInfo = (
    <CModal
      scrollable
      size="xl"
      visible={visibleInfo}
      onClose={() => setVisibleInfo(false)}
    >
      <CModalHeader onClose={() => setVisibleInfo(false)}>
        <CModalTitle>Dataset Attributes</CModalTitle>
      </CModalHeader>
      <CModalBody>
        <CFormTextarea
          placeholder="Date will be shown once its Loaded..."
          id="myTextArea"
          // label="Content from the file"
          rows={20}
          value={fileContent}
          readOnly
          disabled
        ></CFormTextarea>
      </CModalBody>
      <CModalFooter></CModalFooter>
    </CModal>
  );

  const modalFileEditor = (
    <CModal
      fullscreen
      visible={visible}
      onClose={() => setVisible(false)}
      aria-labelledby="FullscreenExample2"
    >
      <CModalHeader className="justify-content-between">
        <CModalTitle>File Editor</CModalTitle>
        <CButton color="secondary" onClick={() => setVisible(false)}>
          -
        </CButton>
      </CModalHeader>
      <CModalBody>
        <CFormTextarea
          placeholder="Date will be shown once it's loaded..."
          id="myTextArea"
          rows={80}
          value={fileContent}
          onChange={(e) => handleDataChange(e)}
        />
      </CModalBody>
      <CModalFooter>
        <CButton color="secondary" onClick={handleOnSaveButtonClick}>
          Save
        </CButton>
      </CModalFooter>
    </CModal>
  );

  const modalHmigrate = (
    <CModal
      scrollable
      visible={visibleHmigrate}
      onClose={() => setVisibleHmigrate(false)}
    >
      <CModalHeader onClose={() => setVisibleHmigrate(false)}>
        <CModalTitle>Hmigrate a dataset</CModalTitle>
      </CModalHeader>
      <CModalBody>
        Tape action will happen in the background!! you can continue your work.
      </CModalBody>
      <CModalFooter>
        <CButton color="secondary" onClick={handleOnHmigrateButtonClick}>
          ok
        </CButton>
      </CModalFooter>
    </CModal>
  );

  const modalHrecall = (
    <CModal
      scrollable
      visible={visibleHrecall}
      onClose={() => setVisibleHrecall(false)}
    >
      <CModalHeader onClose={() => setVisibleHrecall(false)}>
        <CModalTitle>Hrecall a dataset</CModalTitle>
      </CModalHeader>
      <CModalBody>
        Tape action will happen in the background!! you can continue your work.
      </CModalBody>
      <CModalFooter>
        <CButton color="secondary" onClick={handleOnHrecallButtonClick}>
          ok
        </CButton>
      </CModalFooter>
    </CModal>
  );

  const modalHdelete = (
    <CModal
      scrollable
      visible={visibleHdelete}
      onClose={() => setVisibleHdelete(false)}
    >
      <CModalHeader onClose={() => setVisibleHdelete(false)}>
        <CModalTitle>Hdelete a dataset</CModalTitle>
      </CModalHeader>
      <CModalBody>
        Tape action will happen in the background!! you can continue your work.
      </CModalBody>
      <CModalFooter>
        <CButton color="secondary" onClick={handleOnHdeleteButtonClick}>
          ok
        </CButton>
      </CModalFooter>
    </CModal>
  );

  const modalSubmit = (
    <CModal
      scrollable
      visible={visibleSubmit}
      onClose={() => setVisibleSubmit(false)}
    >
      <CModalHeader onClose={() => setVisibleSubmit(false)}>
        <CModalTitle>Submit a job</CModalTitle>
      </CModalHeader>
      <CModalBody>Are you sure, a valid JCL present in this file?</CModalBody>
      <CModalFooter>
        <CButton color="secondary" onClick={handleOnSubmitButtonClick}>
          ok
        </CButton>
        <CButton color="secondary" onClick={() => setVisibleSubmit(false)}>
          cancel
        </CButton>
      </CModalFooter>
    </CModal>
  );

  const modalDelete = (
    <CModal
      scrollable
      visible={visibleDelete}
      onClose={() => setVisibleDelete(false)}
    >
      <CModalHeader onClose={() => setVisibleDelete(false)}>
        <CModalTitle>Delete a dataset</CModalTitle>
      </CModalHeader>
      <CModalBody>Are you sure to delete this dataset?</CModalBody>
      <CModalFooter>
        <CButton color="secondary" onClick={handleOnDeleteButtonClick}>
          ok
        </CButton>
        <CButton color="secondary" onClick={() => setVisibleDelete(false)}>
          cancel
        </CButton>
      </CModalFooter>
    </CModal>
  );

  const modalRename = (
    <CModal
      scrollable
      visible={visibleRename}
      onClose={() => setVisibleRename(false)}
    >
      <CModalHeader onClose={() => setVisibleRename(false)}>
        <CModalTitle>Rename a dataset</CModalTitle>
      </CModalHeader>
      <CModalBody>
        <CFormInput
          placeholder="Enter new name"
          id="renameText"
          label="Enter New Name "
          value={fileName}
          onChange={(e) => handleDataChangeRename(e)}
        ></CFormInput>
      </CModalBody>
      <CModalFooter>
        <CButton color="secondary" onClick={handleOnRenameButtonClick}>
          Rename
        </CButton>
      </CModalFooter>
    </CModal>
  );

  const modalCreate = (
    <CModal
      size="xl"
      visible={visibleCreate}
      onClose={() => setVisibleCreate(false)}
    >
      <CModalHeader onClose={() => setVisibleCreate(false)}>
        <CModalTitle>Create a dataset</CModalTitle>
      </CModalHeader>
      <CModalBody>
        {/* <Tabs defaultActiveKey="1" items={items} onChange={handleonOption} />            */}
        {/* above is to alternative way of having tabs */}
        <CFormInput
          placeholder="Enter new name"
          id="EnterNewName"
          label="Enter New Name "
          onChange={(e) => handleDataChangeForCreateDsn(e)}
        ></CFormInput>

        <Tabs size="large" onChange={handleOnTabOptions}>
          <Tabs.TabPane tab="Model" key="model">
            <div>
              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="inputModelDatasetName"
                  className="col-sm-3 col-form-label"
                >
                  Model Dataset Name
                </CFormLabel>
                <CCol sm={10}>
                  <CFormInput
                    type="text"
                    id="inputModelDatasetName"
                    onChange={(e) => handleDataChangeForModalDsn(e)}
                  />
                </CCol>
              </CRow>
            </div>
          </Tabs.TabPane>
          <Tabs.TabPane tab="Sequential" key="sequential">
            <div>
              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="alcunit"
                  className="col-sm-3 col-form-label"
                >
                  alcunit
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput
                    type="text"
                    id="alcunit"
                    name="alcunit"
                    defaultValue="CYL"
                    onChange={(e) => {
                      setInputValues({
                        ...inputValues,
                        [e.target.name]: e.target.value.trim(),
                      });
                    }}
                  />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="blksize"
                  className="col-sm-3 col-form-label"
                >
                  blksize
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput
                    type="text"
                    id="blksize"
                    name="blksize"
                    defaultValue={6160}
                    onChange={(e) => {
                      setInputValues({
                        ...inputValues,
                        [e.target.name]: e.target.value.trim(),
                      });
                    }}
                  />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel htmlFor="dsorg" className="col-sm-3 col-form-label">
                  dsorg
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput
                    type="text"
                    id="dsorg"
                    name="dsorg"
                    defaultValue="PS"
                    onChange={(e) => {
                      setInputValues({
                        ...inputValues,
                        [e.target.name]: e.target.value.trim(),
                      });
                    }}
                  />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel htmlFor="lrecl" className="col-sm-3 col-form-label">
                  lrecl
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput
                    type="text"
                    id="lrecl"
                    name="lrecl"
                    defaultValue={80}
                    onChange={(e) => {
                      setInputValues({
                        ...inputValues,
                        [e.target.name]: e.target.value.trim(),
                      });
                    }}
                  />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="primary"
                  className="col-sm-3 col-form-label"
                >
                  primary
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput
                    type="text"
                    id="primary"
                    name="primary"
                    defaultValue="1"
                    onChange={(e) => {
                      setInputValues({
                        ...inputValues,
                        [e.target.name]: e.target.value.trim(),
                      });
                    }}
                  />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel htmlFor="recfm" className="col-sm-3 col-form-label">
                  recfm
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput
                    type="text"
                    id="recfm"
                    name="recfm"
                    defaultValue={"FB"}
                    onChange={(e) => {
                      setInputValues({
                        ...inputValues,
                        [e.target.name]: e.target.value.trim(),
                      });
                    }}
                  />
                </CCol>
              </CRow>

              <h3> Optional parameters </h3>
              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="dirblk"
                  className="col-sm-3 col-form-label"
                >
                  dirblk
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput
                    type="text"
                    id="dirblk"
                    name="dirblk"
                    onChange={(e) => {
                      setInputValues({
                        ...inputValues,
                        [e.target.name]: e.target.value.trim(),
                      });
                    }}
                  />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="avgblk"
                  className="col-sm-3 col-form-label"
                >
                  avgblk
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput
                    type="text"
                    id="avgblk"
                    name="avgblk"
                    onChange={(e) => {
                      setInputValues({
                        ...inputValues,
                        [e.target.name]: e.target.value.trim(),
                      });
                    }}
                  />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="dataclass"
                  className="col-sm-3 col-form-label"
                >
                  dataclass
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput
                    type="text"
                    id="dataclass"
                    name="dataclass"
                    onChange={(e) => {
                      setInputValues({
                        ...inputValues,
                        [e.target.name]: e.target.value.trim(),
                      });
                    }}
                  />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="dsntype"
                  className="col-sm-3 col-form-label"
                >
                  dsntype
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput
                    type="text"
                    id="dsntype"
                    name="dsntype"
                    onChange={(e) => {
                      setInputValues({
                        ...inputValues,
                        [e.target.name]: e.target.value.trim(),
                      });
                    }}
                  />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="mgntclass"
                  className="col-sm-3 col-form-label"
                >
                  mgntclass
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput
                    type="text"
                    id="mgntclass"
                    name="mgntclass"
                    onChange={(e) => {
                      setInputValues({
                        ...inputValues,
                        [e.target.name]: e.target.value.trim(),
                      });
                    }}
                  />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="secondary"
                  className="col-sm-3 col-form-label"
                >
                  secondary
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput
                    type="text"
                    id="secondary"
                    name="secondary"
                    onChange={(e) => {
                      setInputValues({
                        ...inputValues,
                        [e.target.name]: e.target.value.trim(),
                      });
                    }}
                  />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="storclass"
                  className="col-sm-3 col-form-label"
                >
                  storclass
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput
                    type="text"
                    id="storclass"
                    name="storclass"
                    onChange={(e) => {
                      setInputValues({
                        ...inputValues,
                        [e.target.name]: e.target.value.trim(),
                      });
                    }}
                  />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel htmlFor="unit" className="col-sm-3 col-form-label">
                  unit
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput
                    type="text"
                    id="unit"
                    name="unit"
                    onChange={(e) => {
                      setInputValues({
                        ...inputValues,
                        [e.target.name]: e.target.value.trim(),
                      });
                    }}
                  />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="volser"
                  className="col-sm-3 col-form-label"
                >
                  volser
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput
                    type="text"
                    id="volser"
                    name="volser"
                    onChange={(e) => {
                      setInputValues({
                        ...inputValues,
                        [e.target.name]: e.target.value.trim(),
                      });
                    }}
                  />
                </CCol>
              </CRow>
            </div>
          </Tabs.TabPane>
          <Tabs.TabPane tab="Partitioned" key="partitioned">
            <div>
              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="alcunit"
                  className="col-sm-3 col-form-label"
                >
                  alcunit
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput type="text" id="alcunit" defaultValue="CYL" />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="blksize"
                  className="col-sm-3 col-form-label"
                >
                  blksize
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput type="text" id="blksize" defaultValue={6160} />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="dirblk"
                  className="col-sm-3 col-form-label"
                >
                  dirblk
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput type="text" id="dirblk" defaultValue="5" />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel htmlFor="dsorg" className="col-sm-3 col-form-label">
                  dsorg
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput type="text" id="dsorg" defaultValue="PO" />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel htmlFor="lrecl" className="col-sm-3 col-form-label">
                  lrecl
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput type="text" id="lrecl" defaultValue={80} />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="primary"
                  className="col-sm-3 col-form-label"
                >
                  primary
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput type="text" id="primary" defaultValue="1" />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel htmlFor="recfm" className="col-sm-3 col-form-label">
                  recfm
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput type="text" id="recfm" defaultValue={"FB"} />
                </CCol>
              </CRow>

              <h3> Optional parameters </h3>

              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="avgblk"
                  className="col-sm-3 col-form-label"
                >
                  avgblk
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput type="text" id="avgblk" />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="dataclass"
                  className="col-sm-3 col-form-label"
                >
                  dataclass
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput type="text" id="dataclass" />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="dsntype"
                  className="col-sm-3 col-form-label"
                >
                  dsntype
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput type="text" id="dsntype" />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="mgntclass"
                  className="col-sm-3 col-form-label"
                >
                  mgntclass
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput type="text" id="mgntclass" />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="secondary"
                  className="col-sm-3 col-form-label"
                >
                  secondary
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput type="text" id="secondary" />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="storclass"
                  className="col-sm-3 col-form-label"
                >
                  storclass
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput type="text" id="storclass" />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel htmlFor="unit" className="col-sm-3 col-form-label">
                  unit
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput type="text" id="unit" />
                </CCol>
              </CRow>

              <CRow className="mb-3">
                <CFormLabel
                  htmlFor="volser"
                  className="col-sm-3 col-form-label"
                >
                  volser
                </CFormLabel>
                <CCol lg="5">
                  <CFormInput type="text" id="volser" />
                </CCol>
              </CRow>
            </div>
          </Tabs.TabPane>
        </Tabs>
        {/* {<Segmented options={['mqPage', 'mqBuff', 'mqPerf', 'Quarterly', 'Yearly']} 
          onChange = {handleonOption}/> } */}
        {/* <form>
              {fieldArray}
              
              <CButton color='secondary' onClick={() => setModalVisible(false)}>Cancel</CButton>
              <CButton color='info' onClick={handleonClick}>Avail Service</CButton>
             
          </form> */}
      </CModalBody>
      <CModalFooter>
        <CButton color="secondary" onClick={handleOnCreateButtonClick}>
          Create
        </CButton>
      </CModalFooter>
    </CModal>
  );

  const modalResponse = (
    <CModal
      size="lg"
      visible={modalVisibleResponse}
      onClose={() => setModalVisibleResponse(false)}
    >
      {/* <CModalHeader onClose={() => setModalVisibleLoading(false)}> */}
      {/* <CModalHeader>
          <CModalTitle></CModalTitle>
      </CModalHeader> */}
      <CModalBody>
        <div> Action Completed. Click below for more details...</div>

        {/* <CButton color='secondary' onClick={() => setModalVisibleTwo(false)}>Cancel</CButton>
              <CButton color='info' onClick={handleonClick}>Avail Service</CButton> */}
      </CModalBody>
      <CModalFooter>
        <div className="mb-3 text-muted">
          <CAccordion activeItemKey={2}>
            <CAccordionItem itemKey={1}>
              <CAccordionHeader>
                Success msg
                details:----------------------------------------------------------------------------------------
              </CAccordionHeader>
              <CAccordionBody>
                <CFormTextarea
                  placeholder="Date will be shown once its Loaded..."
                  id="successMsg"
                  label="Output from Mainframe"
                  rows={20}
                  value={JSON.stringify(successMsg)}
                  disabled
                  readOnly
                ></CFormTextarea>
              </CAccordionBody>
            </CAccordionItem>
          </CAccordion>
        </div>
      </CModalFooter>
    </CModal>
  );

  const modalLoading = (
    <CModal
      visible={modalVisibleLoading}
      backdrop="static"
      onClose={() => setModalVisibleLoading(false)}
    >
      {/* <CModalHeader onClose={() => setModalVisibleLoading(false)}> */}
      {/* <CModalHeader>
          <CModalTitle></CModalTitle>
      </CModalHeader> */}
      <CModalBody>
        <div className="spinner-border" role="status">
          {" "}
          <span className="visually-hidden">Loading...</span>
        </div>

        {/* <CButton color='secondary' onClick={() => setModalVisibleTwo(false)}>Cancel</CButton>
              <CButton color='info' onClick={handleonClick}>Avail Service</CButton> */}
      </CModalBody>
      <CModalFooter>
        <div className="mb-3 text-muted">
          Please wait... Loading in progress..
        </div>
      </CModalFooter>
    </CModal>
  );

  useEffect(() => {
    if (allCardData.length > 0) {
      loadFileSpaceData();
    }
  }, [currentFolder]);

  return (
    <div className="App">
      <h1>File Space</h1>
      <CInputGroup className="mb-3">
        <CFormInput
          placeholder="Enter file directory to load"
          aria-label="File space dir name"
          aria-describedby="file-search"
          defaultValue="SYSSHR.ZOOPS.*"
          onChange={(e) => setSearchInput(e.target.value)}
        />
        <CButton
          type="button"
          color="primary"
          variant="outline"
          id="button-addon1"
          onClick={handleOnLoadButtonClick}
        >
          Load
        </CButton>
      </CInputGroup>
      <div style={{ height: 1000 }}>
        <FullFileBrowser
          files={files}
          folderChain={folderChain}
          defaultFileViewActionId={ChonkyActions.EnableListView.id}
          fileActions={fileActions}
          onFileAction={handleActionWrapper}
          disableDefaultFileActions={true}
        />
      </div>
      {modalLoading}
      {modalResponse}
      {modalFileEditor}
      {modalRename}
      {modalDelete}
      {modalHmigrate}
      {modalHrecall}
      {modalHdelete}
      {modalCreate}
      {modalSubmit}
      {modalInfo}
      if (modalCount {">"} 0)
      {
        <div>
          <DemoReSizableModal
            modalId={1}
            fileContent={fileContent1}
            isVisible={visible1}
            fileName={fileName1}
            setVisible={setVisible1}
          />
          <DemoReSizableModal
            modalId={2}
            fileContent={fileContent2}
            isVisible={visible2}
            fileName={fileName2}
            setVisible={setVisible2}
          />
          <DemoReSizableModal
            modalId={3}
            fileContent={fileContent3}
            isVisible={visible3}
            fileName={fileName3}
            setVisible={setVisible3}
          />
          <DemoReSizableModal
            modalId={4}
            fileContent={fileContent4}
            isVisible={visible4}
            fileName={fileName4}
            setVisible={setVisible4}
          />
          <DemoReSizableModal
            modalId={5}
            fileContent={fileContent5}
            isVisible={visible5}
            fileName={fileName5}
            setVisible={setVisible5}
          />
        </div>
      }
    </div>
  );
}
export default FileSpace;
