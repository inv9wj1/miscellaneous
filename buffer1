router.post("/getFileSpaceData", async (req, res) => {
  console.log("Inside MF router get /getFileSpaceData");
  console.log("req.body: ", req.body.fileDir);

  const authHeader = req.headers["authorization"];
  console.log("auth header is ", authHeader);
  const token = authHeader && authHeader.split(" ")[1];
  console.log("token value is ", token);
  if (!token) {
    return res.status(401).json({ message: "No token provided" });
  }

  try {
    const session = await createSession(token);
    console.log(session);

    let command = `ex 'SYSSHR.ZOOPS.CEXEC(CFILESPC)' '` + req.body.fileDir + `'`;

    // Execute a TSO REXX command
    let response = await IssueTso.issueTsoCommand(
      session,
      userTSO,
      command,
      paramsTSO
    );

    console.log("original response --------------------------------------------------");
    console.log(response);
    console.log("original response --------------------------------------------------");

    if (response && response.success) {
      let responseStr = response.commandResponse;

      if (!responseStr || responseStr.length == 0) {
        res.status(201).json({ message: "Invalid or No response from Mainframe" });
      } else {
        responseStr = responseStr.replace(/READY/g, "");
        responseStr = responseStr.replace(/\n/g, "");
        responseStr = responseStr.replace(/</g, "[");
        responseStr = responseStr.replace(/>/g, "]");
        responseStr = responseStr.replace(/ /g, "");

        try {
          JSON.parse(responseStr);
          res.status(200).json(JSON.parse(responseStr));
        } catch (error) {
          console.log(error);
          res.status(200).json({ message: "Invalid JSON format from Mainframe" });
        }
      }
    } else {
      res.status(200).json({ message: "Invalid or No response from Mainframe" });
    }
  } catch (err) {
    console.log(err);
    res.status(500).json(err);
  }
});
